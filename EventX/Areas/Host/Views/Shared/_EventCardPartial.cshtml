@using EventX.Enums
@using EventX.Models
@model List<EventX.Models.Event>
@{
    ViewData["Title"] = "Sự kiện của tôi";

}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .event-card {
            display: flex;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            padding: 4px;
            border-radius: 8px;
            border: 2px solid;
        }

            .event-card img {
                margin-right: 15px;
                border-radius: 5px;
            }

        .event-info {
            flex-grow: 1;
        }

        .event-actions {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .status-badge {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container mt-4"> 

        @if (Model != null && Model.Any())
        {

            @foreach (var eventItem in Model)
            {

                string badgeColor = eventItem.Status switch
                {
                    EventStatus.Pending => "warning",
                    EventStatus.Approved => "success",
                    EventStatus.Rejected => "danger",
                    EventStatus.Scheduled => "info",
                    EventStatus.Ongoing => "primary",
                    EventStatus.Completed => "secondary",
                    EventStatus.Cancelled => "dark",
                    _ => "secondary"
                };



                string borderColor = badgeColor;

                <div class="event-card d-block">

                    <div class="d-flex" style="background-color:#31353E; color:white;">
                        @if (eventItem.EventImages != null && eventItem.EventImages.Any())
                        {
                            @foreach (var image in eventItem.EventImages)
                            {
                                <img src="@image.ImageURL" alt="Hình ảnh sự kiện" class="img-fluid mb-3 object-fit-fill mt-2 ms-2" style="width:252px; height:154px;" />
                            }
                        }
                        else
                        {
                            <img src="~/images/default-event.jpg" alt="Ảnh mặc định" class="img-fluid mb-3 object-fit-fill mt-2 ms-2" style="width:252px; height:154px;" />
                        }



                        <div class="event-info position-relative">
                            <h5 class="mt-4 mb-3">@eventItem.Title</h5>
                            <p><strong><i class="fa-solid fa-calendar me-2"></i></strong> @eventItem.EventStartTime.ToString("dd/MM/yyyy HH:mm") - @eventItem.EventEndTime.ToString("dd/MM/yyyy HH:mm")</p>
                            <span class="badge bg-@badgeColor position-absolute top-0 start-100 translate-middle badge rounded-pill" data-event-id="@eventItem.EventID">
                                @eventItem.Status.ToVietnamese()
                            </span>
                            @if (eventItem.Locations != null && eventItem.Locations.Any())
                            {
                                var location = eventItem.Locations.First();
                                <span><i class="fa-solid fa-location-dot me-2"></i>@location.Name, @location.FullAddress, @location.Ward, @location.District, @location.City</span>
                            }
                            else
                            {
                                <span>Không có địa điểm.</span>
                            }



                        </div>
                    </div>


                    <div class="event-actions d-flex flex-row  gap-4 align-items-center justify-content-center  border-dark" style="background-color:#414652">
                        <a href="@Url.Action("Index", "Order", new { eventId = 9 })">Xem đơn hàng</a>
                        <div>
                            <a href="@Url.Action("Update", "Event", new { id = eventItem.EventID })" class="btn btn-sm border-0 btn-primary mb-2 mt-3" style="color: #FFFFFF; background-color:#414652;">
                                <i class="fa-solid fa-pen d-block mb-2"></i>
                                Chỉnh sửa
                            </a>
                        </div>
                        <div>
                            <a href="@Url.Action("Display", "Event", new { area = "Host", eventId = eventItem.EventID })" class="btn btn-sm border-0 btn-info text-white mb-2 mt-3" style="color: #FFFFFF; background-color:#414652;">
                                <i class="fa-solid fa-info d-block mb-2"></i>
                                Chi tiết
                            </a>
                        </div>
                        <div>
                            @if (eventItem.Status != EventStatus.Cancelled)
                            {
                                <button class="btn btn-danger btn-sm btn-cancel border-0 text-white mb-2 mt-3" style="color: #FFFFFF; background-color:#414652;" data-event-id="@eventItem.EventID">
                                    <i class="fa-regular fa-calendar-xmark d-block mb-2" style="color: white;"></i>
                                    Hủy
                                </button>
                            }
                        </div>
                    </div>
                </div>

            }
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                Bạn chưa tạo sự kiện nào. <a href="@Url.Action("Add", "Event")" class="alert-link">Tạo sự kiện mới ngay!</a>
            </div>
        }
    </div>

    <!-- Modal xác nhận hủy -->
    <div class="modal fade" id="cancelModal" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cancelModalLabel">Xác nhận hủy</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    Bạn có chắc chắn muốn hủy không?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Không</button>
                    <button type="button" id="confirm-cancel" class="btn btn-danger">Đồng ý</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
                       $(document).ready(function () {
            var eventId; // Biến này lưu id sự kiện khi click nút hủy

            // Khi bấm vào bất kỳ nút Hủy nào
            $('.btn-cancel').click(function () {
                eventId = $(this).data('event-id'); // Lấy id từ nút đó
                $('#cancelModal').modal('show');
            });

            // Khi xác nhận hủy
            $('#confirm-cancel').click(function () {
                $.ajax({
                    url: '/Host/Event/Cancel',
                    type: 'POST',
                    data: { id: eventId },
                    success: function (response) {
                        if(response.success) {
                            $('#cancelModal').modal('hide');

                           const badge = $(`.badge[data-event-id='${eventId}']`);
                            badge.text('Đã hủy'); // Thay đổi văn bản của badge
                            badge.removeClass().addClass('badge bg-dark position-absolute top-0 start-100 translate-middle badge rounded-pill'); // Thay đổi màu sắc

                            // Ẩn nút hủy sau khi đã hủy
                            const cancelButton = $(`.btn-cancel[data-event-id='${eventId}']`);
                            cancelButton.hide();

                            alert('Đã hủy sự kiện thành công!');
                        } else {
                            alert('Có lỗi xảy ra khi hủy sự kiện!');
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Có lỗi xảy ra! Mã lỗi: ' + xhr.status + '\nThông báo lỗi: ' + error);
                        console.error('Lỗi trong AJAX:', xhr, status, error); // Hiển thị thêm chi tiết trong Console
                    }
                });
            });
        });


        // Helper function to get status badge color
           function GetStatusBadgeColor(status) {
            switch(status) {
                case '@EventStatus.Pending.ToString()':
                    return 'warning';
                case '@EventStatus.Approved.ToString()':
                    return 'success';
                case '@EventStatus.Rejected.ToString()':
                    return 'danger';
                case '@EventStatus.Scheduled.ToString()':
                    return 'info';
                case '@EventStatus.Ongoing.ToString()':
                    return 'primary';
                case '@EventStatus.Completed.ToString()':
                    return 'secondary';
                case '@EventStatus.Cancelled.ToString()':
                    return 'dark';
                default:
                    return 'secondary';
            }
        }
    </script>
</body>
</html>
